#!/bin/bash

# Docker Development Helper Script
set -e

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Function to print colored output
print_status() {
    echo -e "${BLUE}[INFO]${NC} $1"
}

print_success() {
    echo -e "${GREEN}[SUCCESS]${NC} $1"
}

print_warning() {
    echo -e "${YELLOW}[WARNING]${NC} $1"
}

print_error() {
    echo -e "${RED}[ERROR]${NC} $1"
}

# Check if .env exists, if not copy from .env.docker
if [ ! -f .env ]; then
    print_warning ".env file not found. Creating from .env.docker template..."
    cp .env.docker .env
    print_success "Created .env file. Please review and update as needed."
fi

# Function definitions
start() {
    print_status "Starting Docker development environment..."
    docker-compose up -d
    print_success "Development environment started!"
    print_status "Rails app: http://localhost:3000"
    print_status "PostgreSQL: localhost:5432"
    print_status "Redis: localhost:6379"
}

stop() {
    print_status "Stopping Docker development environment..."
    docker-compose down
    print_success "Development environment stopped!"
}

restart() {
    print_status "Restarting Docker development environment..."
    docker-compose down
    docker-compose up -d
    print_success "Development environment restarted!"
}

build() {
    print_status "Building Docker images..."
    docker-compose build
    print_success "Docker images built successfully!"
}

logs() {
    if [ -n "$2" ]; then
        docker-compose logs -f "$2"
    else
        docker-compose logs -f
    fi
}

shell() {
    service=${2:-web}
    print_status "Opening shell in $service container..."
    docker-compose exec "$service" bash
}

rails() {
    shift # Remove 'rails' from arguments
    print_status "Running Rails command: $*"
    docker-compose exec web bundle exec bin/rails "$@"
}

db_setup() {
    print_status "Setting up database..."
    docker-compose exec web bundle exec bin/rails db:create db:migrate db:seed
    print_success "Database setup complete!"
}

db_reset() {
    print_warning "This will destroy all data in the database!"
    read -p "Are you sure? (y/N): " -n 1 -r
    echo
    if [[ $REPLY =~ ^[Yy]$ ]]; then
        print_status "Resetting database..."
        docker-compose exec web bundle exec bin/rails db:drop db:create db:migrate db:seed
        print_success "Database reset complete!"
    else
        print_status "Database reset cancelled."
    fi
}

test() {
    print_status "Running tests..."
    docker-compose exec web bundle exec bin/rails test
}

clean() {
    print_status "Cleaning up Docker resources..."
    docker-compose down -v
    docker-compose build --no-cache
    print_success "Docker cleanup complete!"
}

# Help function
help() {
    echo "Docker Development Helper Script"
    echo ""
    echo "Usage: ./bin/docker-dev [command]"
    echo ""
    echo "Commands:"
    echo "  start         Start the development environment"
    echo "  stop          Stop the development environment"  
    echo "  restart       Restart the development environment"
    echo "  build         Build Docker images"
    echo "  logs [service] Show logs (optionally for specific service)"
    echo "  shell [service] Open shell in container (default: web)"
    echo "  rails [args]  Run Rails commands"
    echo "  db:setup      Setup database (create, migrate, seed)"
    echo "  db:reset      Reset database (WARNING: destroys data)"
    echo "  test          Run tests"
    echo "  clean         Clean up and rebuild everything"
    echo "  help          Show this help"
    echo ""
    echo "Examples:"
    echo "  ./bin/docker-dev start"
    echo "  ./bin/docker-dev logs web"
    echo "  ./bin/docker-dev shell db"
    echo "  ./bin/docker-dev rails console"
    echo "  ./bin/docker-dev rails generate model User"
}

# Main command handling
case "${1:-help}" in
    start)
        start
        ;;
    stop)
        stop
        ;;
    restart)
        restart
        ;;
    build)
        build
        ;;
    logs)
        logs "$@"
        ;;
    shell)
        shell "$@"
        ;;
    rails)
        rails "$@"
        ;;
    db:setup)
        db_setup
        ;;
    db:reset)
        db_reset
        ;;
    test)
        test
        ;;
    clean)
        clean
        ;;
    help)
        help
        ;;
    *)
        print_error "Unknown command: $1"
        echo ""
        help
        exit 1
        ;;
esac